package net.labymod.api.client.gui.screen.widget.widgets.activity.settings;

import java.util.Locale;
import java.util.function.BiConsumer;
import java.util.function.BooleanSupplier;
import java.util.function.Consumer;
import net.labymod.api.Textures.SpriteCommon;
import net.labymod.api.client.component.Component;
import net.labymod.api.client.component.format.NamedTextColor;
import net.labymod.api.client.component.format.TextDecoration;
import net.labymod.api.client.gui.icon.Icon;
import net.labymod.api.client.gui.lss.property.annotation.AutoWidget;
import net.labymod.api.client.gui.lss.style.modifier.attribute.AttributeState;
import net.labymod.api.client.gui.screen.Parent;
import net.labymod.api.client.gui.screen.ScreenContext;
import net.labymod.api.client.gui.screen.widget.Widget;
import net.labymod.api.client.gui.screen.widget.action.Pressable;
import net.labymod.api.client.gui.screen.widget.context.ContextMenu;
import net.labymod.api.client.gui.screen.widget.context.ContextMenuEntry;
import net.labymod.api.client.gui.screen.widget.widgets.ComponentWidget;
import net.labymod.api.client.gui.screen.widget.widgets.DivWidget;
import net.labymod.api.client.gui.screen.widget.widgets.PopupWidget;
import net.labymod.api.client.gui.screen.widget.widgets.input.ButtonWidget;
import net.labymod.api.client.gui.screen.widget.widgets.input.SwitchWidget;
import net.labymod.api.client.gui.screen.widget.widgets.layout.FlexibleContentWidget;
import net.labymod.api.client.gui.screen.widget.widgets.layout.list.VerticalListWidget;
import net.labymod.api.client.gui.screen.widget.widgets.renderer.IconWidget;
import net.labymod.api.configuration.settings.Setting;
import net.labymod.api.configuration.settings.SettingHandler;
import net.labymod.api.configuration.settings.SettingOverlayInfo;
import net.labymod.api.configuration.settings.accessor.SettingAccessor;
import net.labymod.api.configuration.settings.type.SettingElement;
import net.labymod.api.configuration.settings.type.list.ListSettingEntry;
import net.labymod.api.configuration.settings.util.SettingActivitySupplier;
import net.labymod.api.revision.Revision;
import net.labymod.api.user.permission.ClientPermission;

@AutoWidget
public class SettingWidget extends FlexibleContentWidget {

  private final Setting setting;
  private final Consumer<Setting> advancedCallback;
  private boolean lastRenderEnabled;


  public SettingWidget(Setting setting, boolean lazy) {
    this(setting, lazy, null);
  }

  public SettingWidget(Setting setting, boolean lazy, Consumer<Setting> advancedCallback) {
    this.setting = setting;
    this.advancedCallback = advancedCallback;

    // The theme switcher should not be lazy because it is buggy
    // WARNING: Doesn't work when the height of the setting has fit-content
    // The scrollbar visibility has issues with that
    this.lazy = (!this.setting.isElement() || !this.setting.asElement().isExtended()) && lazy;
  }

  public Setting setting() {
    return this.setting;
  }

  @Override
  public void renderWidget(ScreenContext context) {
    boolean enabled = this.setting.isEnabled();
    if (this.lastRenderEnabled != enabled) {
      this.lastRenderEnabled = enabled;
      this.setAttributeState(AttributeState.ENABLED, enabled);
    }

    super.renderWidget(context);
  }

  @Override
  public void initialize(Parent parent) {
    super.initialize(parent);
    boolean settingEnabled = this.setting.isEnabled();

    //attributes doesn't need to be patched as no stylesheets are loaded yet.
    boolean tempPreventStateUpdate = this.preventStateUpdate;
    this.preventStateUpdate = true;
    this.lastRenderEnabled = settingEnabled;
    this.setAttributeState(AttributeState.ENABLED, settingEnabled);
    this.preventStateUpdate = tempPreventStateUpdate;

    Widget[] inputWidgets = this.setting.isElement() ? this.setting.asElement().getWidgets() : null;

    // Status indicator
    DivWidget statusIndicator = new DivWidget();
    statusIndicator.addId("status-indicator");
    this.addContent(statusIndicator);

    // Header
    FlexibleContentWidget content = new FlexibleContentWidget();
    content.addId("setting-content");
    Component description = this.setting.getDescription();
    if (description != null) {
      content.setHoverComponent(description, 300.0F);
    }
    this.initializeInfoWidgets(content);
    this.initializeInteractionWidget(content, inputWidgets, statusIndicator);

    // Add extended input widgets
    if (inputWidgets != null && this.setting.asElement().isExtended()) {
      VerticalListWidget<Widget> extended = new VerticalListWidget<>().addId("extended-content");
      extended.addChild(content);

      for (Widget inputWidget : inputWidgets) {
        //todo remove
        if (inputWidget instanceof AddonActivityWidget) {
          continue;
        }

        inputWidget.reset();
        inputWidget.addId("extended-input-widget");

        extended.addChild(inputWidget);
      }

      this.addFlexibleContent(extended);
    } else {
      this.addFlexibleContent(content);
    }

    if (this.setting.isElement()) {
      SettingElement settingElement = this.setting.asElement();

      SettingAccessor accessor = settingElement.getAccessor();
      if (settingElement.getResetListener() != null
          || (accessor != null && accessor.property() != null)) {
        ContextMenu contextMenu = this.createContextMenu();
        contextMenu.with(ContextMenuEntry.builder()
            .icon(SpriteCommon.TRASH)
            .text(Component.translatable("labymod.ui.button.reset"))
            .disabled(new BooleanSupplier() {
              @Override
              public boolean getAsBoolean() {
                boolean resettable = settingElement.isResettable();
                if (!resettable) {
                  for (Setting childSetting : settingElement.values()) {
                    if (childSetting.isResettable()) {
                      resettable = true;
                      break;
                    }
                  }
                }

                return !resettable;
              }
            })
            .clickHandler(new BiConsumer<ContextMenuEntry, Object>() {
              @Override
              public void accept(ContextMenuEntry entry, Object widget) {
                SettingWidget.this.resetSetting(settingElement);
              }
            })
            .build());

        // Add force enable to context menu
        ClientPermission permission = this.getPermission();
        if (permission != null
            && !permission.isDefaultEnabled()
            && !permission.isEnabled()
            && this.labyAPI.minecraft().isIngame()
            && this.setting.canForceEnable()) {
          String forceEnableKey = "labymod.ui.settings.serverFeatures.forceEnable.%s";
          contextMenu.addEntry(
              ContextMenuEntry.builder()
                  .icon(SpriteCommon.SHIELD)
                  .text(Component.translatable(String.format(Locale.ROOT, forceEnableKey, "entry")))
                  .clickHandler(entry -> {
                    PopupWidget.builder()
                        .title(Component.translatable(
                            String.format(Locale.ROOT, forceEnableKey, "title")))
                        .text(Component.translatable(
                            String.format(Locale.ROOT, forceEnableKey, "warning")))
                        .confirmCallback(() -> {
                          permission.setEnabled(true);
                          this.reInitialize();
                        })
                        .build()
                        .displayInOverlay();
                    return true;
                  })
                  .build()
          );
        }
      }
    }
  }

  private void resetSetting(SettingElement setting) {
    setting.reset();
    this.callActionListeners(true);

    for (Setting childSetting : setting.values()) {
      if (childSetting.isElement()) {
        this.resetSetting(childSetting.asElement());
      }
    }
  }

  private void initializeInfoWidgets(FlexibleContentWidget header) {
    // Add permission warning
    SettingOverlayInfo settingOverlayInfo = null;
    ClientPermission permission = this.getPermission();
    if (permission != null) {
      this.addId("permission-required");

      boolean permissionDefaultEnabled = permission.isDefaultEnabled();
      boolean permissionEnabled = !this.labyAPI.serverController().isConnected()
          || permission.isEnabled();

      if (!permissionDefaultEnabled && !this.labyAPI.minecraft().isIngame()
          || !permissionEnabled) {
        settingOverlayInfo = permission.overlayInfo();
      }
    }

    if (settingOverlayInfo == null && this.setting.isElement()) {
      settingOverlayInfo = this.setting.asElement().getOverlayInfo();
    }

    if (settingOverlayInfo != null) {
      boolean active = settingOverlayInfo.isActive();
      if (active || settingOverlayInfo.isExclamationMarkAlwaysVisible()) {
        // Exclamation mark
        IconWidget widget = new IconWidget(null);
        widget.addId("permission-warning");
        if (!active) {
          widget.setHoverComponent(settingOverlayInfo.component());
        }

        header.addContent(widget);
      }

      if (active) {
        this.addId("disabled");

        // Disabled overlay
        DivWidget permissionDisabled = new DivWidget();
        permissionDisabled.addId("permission-disabled");
        permissionDisabled.setPressable(new Pressable() {
          @Override
          public void press() {
            // Prevent clicks on the underlying setting widget
          }
        });
        this.addContent(permissionDisabled);

        // Overwrite hover component of description
        header.setHoverComponent(settingOverlayInfo.component());
      }
    }

    // Add icon
    Icon icon = this.setting.getIcon();
    if (icon != null) {
      IconWidget widget = new IconWidget(icon);
      widget.addId("setting-icon");
      header.addContent(widget);
    }

    // Add display name
    // DivWidget displayNameWrapper = new DivWidget();
    // displayNameWrapper.addId("display-name-wrapper");

    ComponentWidget displayName = ComponentWidget.component(this.setting.displayName());
    displayName.addId("display-name");
    //displayNameWrapper.addChild(displayName);

    header.addFlexibleContent(displayName);
  }

  @Override
  public boolean isVisible() {
    return super.isVisible() && (!this.setting.isElement() || this.setting.asElement().isVisible());
  }

  private ClientPermission getPermission() {
    if (!this.setting.isElement()) {
      return null;
    }
    String requiredPermission = this.setting.asElement().getRequiredPermission();
    return requiredPermission == null
        ? null
        : this.labyAPI.permissionRegistry().getPermission(requiredPermission);
  }

  private void initializeInteractionWidget(
      FlexibleContentWidget header,
      Widget[] inputWidgets,
      Widget indicator
  ) {
    SettingHandler handler = this.setting.handler();
    SwitchWidget advancedSwitch = null;
    SwitchWidget indicatorSwitch = null;

    if (inputWidgets != null) {
      for (Widget inputWidget : inputWidgets) {
        if (inputWidget instanceof SettingActivitySupplier) {
          inputWidget.setPressable(new Pressable() {
            @Override
            public void press() {
              SettingWidget.this.advancedCallback.accept(SettingWidget.this.setting);
            }
          });
        }
      }
    }

    // New badge
    if (this.setting.isElement()) {
      Revision revision = this.setting.asElement().getRevision();
      if (revision != null && revision.isRelevant()) {
        IconWidget newBadge = new IconWidget(SpriteCommon.NEW);
        newBadge.addId("new-badge");
        newBadge.setHoverComponent(
            Component.translatable("labymod.misc.introduced")
                .color(NamedTextColor.BLUE)
                .argument(
                    Component.text(revision.getDisplayName())
                        .color(NamedTextColor.WHITE)
                        .decorate(TextDecoration.BOLD)
                )
        );
        header.addContent(newBadge);
      }
    }

    // Advanced button
    if (this.setting.hasAdvancedButton()
        || (inputWidgets != null && inputWidgets[0] instanceof AddonActivityWidget)
        || (handler != null && handler.opensActivity(this.setting))) {

      ButtonWidget advancedButton = null;
      //todo remove
      if (inputWidgets != null
          && inputWidgets[0] instanceof AddonActivityWidget addonActivityWidget) {
        String text = addonActivityWidget.getText();
        if (text != null) {
          advancedButton = ButtonWidget.text(text);
        }
      }

      if (advancedButton == null) {
        advancedButton = ButtonWidget.advancedSettings();
      }

      advancedButton.addId("advanced-button");
      advancedButton.setPressable(new Pressable() {
        @Override
        public void press() {
          SettingWidget.this.advancedCallback.accept(SettingWidget.this.setting);
        }
      });
      header.addContent(advancedButton);

      // Control button
      if (this.setting.hasControlButton()) {
        if (this.setting instanceof SettingElement settingElement) {
          Widget[] widgets = settingElement.getWidgets();
          if (widgets != null && widgets.length > 0 && widgets[0] instanceof SwitchWidget) {
            advancedSwitch = (SwitchWidget) widgets[0];
          }
        }
      }
    }

    // Delete button
    if (this.setting instanceof ListSettingEntry) {
      ButtonWidget advancedButton = ButtonWidget.deleteButton();
      advancedButton.addId("delete-button");
      advancedButton.setPressable(new Pressable() {
        @Override
        public void press() {
          ((ListSettingEntry) SettingWidget.this.setting).remove();
          SettingWidget.this.advancedCallback.accept(null);
        }
      });
      header.addContent(advancedButton);
    }

    // Add input widget
    if (inputWidgets != null && !this.setting.asElement().isExtended()) {
      FlexibleContentWidget div = new FlexibleContentWidget();
      div.addId("input-wrapper");

      for (int i = inputWidgets.length - 1; i >= 0; i--) {
        Widget inputWidget = inputWidgets[i];
        if (indicatorSwitch == null && inputWidget instanceof SwitchWidget) {
          indicatorSwitch = (SwitchWidget) inputWidget;
        }

        //todo remove check
        if (!(inputWidget instanceof AddonActivityWidget)) {
          inputWidget.reset();
          inputWidget.addId("input-widget");

          if (i == 0) {
            div.addContent(inputWidget);
          } else {
            div.addFlexibleContent(inputWidget);
          }
        }
      }

      if (!div.getChildren().isEmpty()) {
        header.addContent(div);
      }
    }

    SwitchWidget switchWidget = indicatorSwitch != null ? indicatorSwitch : advancedSwitch;
    if (switchWidget != null) {
      indicator.addId(switchWidget.getValue() ? "status-enabled" : "status-disabled");
      switchWidget.setActionListener("indicator", new Runnable() {
        @Override
        public void run() {
          indicator.replaceId(
              switchWidget.getValue() ? "status-disabled" : "status-enabled",
              switchWidget.getValue() ? "status-enabled" : "status-disabled"
          );
        }
      });
    }
  }
}
